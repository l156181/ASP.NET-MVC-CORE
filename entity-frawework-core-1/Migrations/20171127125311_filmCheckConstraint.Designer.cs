// <auto-generated />
using entity_frawework_core_1.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace entityfraweworkcore1.Migrations
{
    [DbContext(typeof(AluraFilmesContext))]
    [Migration("20171127125311_filmCheckConstraint")]
    partial class filmCheckConstraint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("entity_frawework_core_1.Model.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("actor_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ActorId");

                    b.HasAlternateKey("FirstName", "LastName");

                    b.HasIndex("LastName")
                        .HasName("idx_actor_last_name");

                    b.ToTable("actor");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.Customer", b =>
                {
                    b.Property<byte>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("('Y')");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CustomerId");

                    b.HasIndex("LastName")
                        .HasName("idx_last_name");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("film_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<byte>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short?>("Length")
                        .HasColumnName("length");

                    b.Property<byte?>("OriginalLanguageId")
                        .HasColumnName("original_language_id");

                    b.Property<string>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rating")
                        .HasDefaultValueSql("('G')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ReleaseYear")
                        .HasColumnName("release_year")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("FilmId");

                    b.HasIndex("LanguageId")
                        .HasName("idx_fk_language_id");

                    b.HasIndex("OriginalLanguageId")
                        .HasName("idx_fk_original_language_id");

                    b.ToTable("film");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.FilmActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnName("actor_id");

                    b.Property<int>("FilmId")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ActorId", "FilmId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ActorId")
                        .HasName("idx_fk_film_actor_actor");

                    b.HasIndex("FilmId")
                        .HasName("idx_fk_film_actor_film");

                    b.ToTable("film_actor");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.FilmCategory", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnName("film_id");

                    b.Property<byte>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FilmId", "CategoryId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId")
                        .HasName("idx_fk_film_category_category");

                    b.HasIndex("FilmId")
                        .HasName("idx_fk_film_category_film");

                    b.ToTable("film_category");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.Language", b =>
                {
                    b.Property<byte>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(20)");

                    b.HasKey("LanguageId");

                    b.ToTable("language");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.Staff", b =>
                {
                    b.Property<byte>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.HasKey("StaffId");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.Film", b =>
                {
                    b.HasOne("entity_frawework_core_1.Model.Language", "Language")
                        .WithMany("FilmLanguage")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("fk_film_language");

                    b.HasOne("entity_frawework_core_1.Model.Language", "OriginalLanguage")
                        .WithMany("FilmOriginalLanguage")
                        .HasForeignKey("OriginalLanguageId")
                        .HasConstraintName("fk_film_language_original");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.FilmActor", b =>
                {
                    b.HasOne("entity_frawework_core_1.Model.Actor", "Actor")
                        .WithMany("FilmActor")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("fk_film_actor_actor");

                    b.HasOne("entity_frawework_core_1.Model.Film", "Film")
                        .WithMany("FilmActor")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("fk_film_actor_film");
                });

            modelBuilder.Entity("entity_frawework_core_1.Model.FilmCategory", b =>
                {
                    b.HasOne("entity_frawework_core_1.Model.Category", "Category")
                        .WithMany("FilmCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_film_category_category");

                    b.HasOne("entity_frawework_core_1.Model.Film", "Film")
                        .WithMany("FilmCategory")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("fk_film_category_film");
                });
#pragma warning restore 612, 618
        }
    }
}
